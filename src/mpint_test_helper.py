"""
Usage: script.py [-h] [--base BASE=10] lhs {+,-,*,/} rhs res_to_verify
Example: script.py 123 + 456 579
"""

import sys, argparse

def test_operation_result(
        lhs: str,
        op: str,
        rhs: str,
        res_to_verify: str,
        base: int = 10
    ) -> bool:
    """
    Call this function from outside, to compare an externally performed operation's
    result (`res_to_verify`) with python's calculation.
    """

    # removes whitespace
    rm_whspc = lambda s: "".join(s.split())

    try:
        lhs = int(rm_whspc(lhs), base)
        rhs = int(rm_whspc(rhs), base)
        res_to_verify = int(rm_whspc(res_to_verify), base)
    except ValueError:
        print("Error: input numbers must all be integers of specified base.")
        sys.exit(1)

    res_python = perform_operation(lhs, op, rhs)
    (success, msg) = cmp_result_with_given(res_python, res_to_verify)
    return (success, msg)


def perform_operation(lhs: int, op: str, rhs: int) -> int:
    """
    Performs a basic arithmetic operation on two integers.
    """
    if op == "+":
        result = lhs + rhs
    elif op == "-":
        result = lhs - rhs
    elif op == "*":
        result = lhs * rhs
    elif op == "/":
        result = lhs // rhs
    return result

def cmp_result_with_given(res_python, res_to_verify) -> tuple[bool, str]:
    """
    Compares the given with the python-calculated result.
    """
    success = res_python == res_to_verify
    out_msg = (
        f"correct: {res_python}\n" +
        f"given:   {res_to_verify}" + "\n"
    )
    if success:
        out_msg += "→→→→   ok   ←←←←"
    else:
        out_msg += "→→→→   TEST FAILED   ←←←←: calculated != given"
    return (success, out_msg)


# --------------------------- Basic CLI
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='simple arithmetics tester',)
    parser.add_argument('--base', type=int, default=10, help="Input numbers base")
    parser.add_argument("lhs", type=str, help="First operand")
    parser.add_argument("op", type=str, choices=["+","-","*","/"], help="Operator")
    parser.add_argument("rhs", type=str, help="Second operand")
    parser.add_argument("res_to_verify", type=str, help="Result to be verified")
    args = parser.parse_args()

    # get values and operator
    base = args.base
    a = args.lhs
    op = args.op
    b = args.rhs
    res_to_verify = args.res_to_verify

    print("-----------------------------------------------------------------")
    print(test_operation_result(a, op, b, res_to_verify, base)[1])
    print("-----------------------------------------------------------------")


"""
TEST1

 + 

 130326172664993843551413724835961115063684044871332935801323403796611047745521601364925926494364699632858900532849983308308961803952388400704566594183003622566128146891452913243308058484325925098848025602425015939030713962884165275076867831083839097242155517444013866675622687571162825145284719090515190544399935786126383484674665619971886762007602284957643267319183182877919980542494495094936633766096645622371305780684363498575100536455468703124676170456694717001721610013788734052378839824463882880517827837442803788415132789831001611720071639666507067552041676554563600048580427438707760307421554669066832763049050439534498001877928227192367324774849319580916778816991755747738429363058862900443509141618981748354152737106578721766566941044371565024278093839113876857058246247727040712993951151430642074989151961347495980234340924518865173166423729928149566649710379424939815991280238994933499885933589647339571862956309622454685010570830432309862834317744939627150125853852741414435938945727153402 

TEST2
 31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989
 - 

 -67494319593197978782160857170371057379740656883830819381824511950454719619797421392365229987522358273215938802584337175367084911761376756070059406020434000217122464837414142821196865591866946000240386313848796425712045040314652310401132167778415059059242546105544659703413601038198557273139514107689716052659803659814619987044247200715301680173294997599791460118956572266943571212066812155897803533907984476963990588845301654852752897803232841022305208967447117746730262976073679554554281060803643897921154370193990655553412361932073707225327825622909848677986265770220074185045379745211390954033452029055470220143779222978782575022772435008894581200419950762892279748388824756031008347213269115265038301219859505773713519825890358570294345548945365813903949612113876889598685248705846078337629225058741585800045023181443129788175857625164467927799966507949503892935321693189151823651826651380116939861624577530996753581686431197407363495078557270707197162134296202613993593814183882212020761398749424

TEST3: u64::MAX*2
--base 16 FFFFFFFFFFFFFFFF + FFFFFFFFFFFFFFFF 1FFFFFFFFFFFFFFFE
 """

"""
def 
"""